@inject FoodScapeContext _context
@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> UserManager
@inject IServiceProvider _serviceProvider
@using Food_Scape.Repositories
@using Food_Scape.Models


@model IEnumerable<Food_Scape.Models.Review>

@{
    ViewData["Title"] = "Reviews";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @ViewBag.ErrorMessage
    </div>
}




<head>
    <link rel="stylesheet" href="./css/review/review-index.css">
</head>
<div class="container pt-5">
    @if (User != null)
    {

        @if (User.Identity!.IsAuthenticated)
        {
            var user = new UserRepository(_context, _serviceProvider).GetUserByEmail(User.Identity.Name);
            var userReview = new ReviewRepository(_context).GetUserReview(user.UserId);
            <!-- Logged In Users Review -->
            if (userReview != null)
            {
                <h2 class="pt-3">Your Review</h2>
                <div class="card mb-4 box-shadow pt-3">
                    <div class="card-body">
                        <p class="card-text">@Html.DisplayFor(modelItem => userReview.Review1)</p>
                        <div class="d-flex flex-column justify-content-between">
                            <div class="d-flex flex-row justify-content-between">
                                <div>
                                    @for (int i = 0; i < userReview.Rating; i++)
                                    {
                                        <i class="fas fa-star"></i>
                                    }
                                    @for (int i = 0; i < 5 - userReview.Rating; i++)
                                    {
                                        <i class="far fa-star"></i>
                                    }
                                </div>
                                <div>
                                    @{
                                        <h3 class="small-font-size reviewName"><small class="">@user.FirstName @user.LastName?.Substring(0, 1)</small></h3>
                                    }
                                </div>
                            </div>
                            <div class="d-flex flex-row align-items-center mt-4">
                                <button type="button" class="btn btn-secondary edit-review" data-bs-toggle="modal" data-bs-target="#create-review-modal"
                            data-action="edit"
                            data-bs-id="@userReview.ReviewId"
                            data-bs-description="@userReview.Review1"
                            data-bs-rating="@userReview.Rating">
                                    Edit
                                </button>
                                <button class="btn btn-danger delete-button" data-bs-toggle="modal" data-bs-target="#delete-modal"
                            data-id="@userReview.ReviewId">
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card mb-4 box-shadow pt-3">
                    <div class="card-body">
                        <h2 class="card-title text-center">You haven't written a review yet</h2>
                        <p class="card-text text-center">Writing a review is a great way to share your experiences with other users and help them make informed decisions about our product. We'd love to hear from you!</p>
                        <div class="text-center">
                            <button type="button" class="review-btn btn review-page-btn" data-bs-toggle="modal" data-bs-target="#create-review-modal" data-action="create">Write a Review</button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="card mb-4 box-shadow pt-3">
                <div class="card-body">
                    <h2 class="card-title text-center">You haven't written a review yet</h2>
                    <p class="card-text text-center">Writing a review is a great way to share your experiences with other users and help them make informed decisions about our product. We'd love to hear from you!</p>
                    <div class="text-center">
                        <a class="text-center text-decoration-underline" asp-area="Identity" asp-page="/Account/Login">Log in to write a review</a>
                    </div>
                </div>
            </div>
        }
    }
    <h1 class="border-bottom border-secondary pb-3 mb-5">
        Reviews
    </h1>
    <div class="row mt-2">

        @if(Model.Count() == 0)
        {
                        <div class="card mb-4 box-shadow pt-3">
            <div class="card-body">
                <h2 class="card-title text-center">No reviews to share!</h2>
                <p class="card-text text-center">Be the first to write a review and help others make informed decisions about our product.</p>
            </div>
        </div>
        }

        @foreach (var item in Model)
        {
            <div class="col-md-12">
                <div class="card mb-4 box-shadow">
                    <div class="card-body">
                        <p class="card-text">@Html.DisplayFor(modelItem => item.Review1)</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                @for (int i = 0; i < item.Rating; i++)
                                {
                                    <i class="fas fa-star"></i>
                                }
                                @for (int i = 0; i < 5 - item.Rating; i++)
                                {
                                    <i class="far fa-star"></i>
                                }
                            </div>
                            <div class="justify-content-end">
                                @{
                                    UserRepository uRepo = new UserRepository(_context, _serviceProvider);
                                    var user = uRepo.GetUserById(item.UserId);
                                    if (user != null)
                                    {
                                        <h3 class="small-font-size reviewName"><small class="">@user.FirstName @user.LastName?.Substring(0, 1)</small></h3>
                                    }
                                }
                            </div>
                        </div>
                        @if (User.Identity.IsAuthenticated)
                        {
                            @if (await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "Admin"))
                            {
                                <button class="btn btn-danger delete-button mt-4" data-bs-toggle="modal" data-bs-target="#delete-modal" data-id="@item.ReviewId">Delete</button>
                            }
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Delete Modal -->
<div class="modal fade" id="delete-modal" tabindex="-1" role="dialog" aria-labelledby="delete-modal-title" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="delete-modal-title">Confirm Delete</h5>
                <button type="button" class="close border-0" data-bs-dismiss="modal" aria-label="Close">
                    <i class="fas fa-xmark"></i>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this review?
            </div>
            <div class="modal-footer">
                <form id="delete-form" action="" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger deleteSubmit">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>


<!-- Create/Edit Modal -->
<div class="modal fade" id="create-review-modal" tabindex="-1" aria-labelledby="create-review-modal-label" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="create-review-modal-label">
                    <span class="create-modal-title">Create Review</span>
                    <span class="edit-modal-title d-none">Edit Review</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" id="create-edit-form" action="" enctype="multipart/form-data">
                    @{
                        var userEmail = await UserManager.GetUserAsync(User);
                    }
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <input type="hidden" name="UserId" value="@userEmail" />
                    </div>
                    <div class="mb-3">
                        <label for="Review1" class="form-label">Review</label>
                        <textarea class="form-control" id="Review1" name="Review1" minlength="5" rows="5" maxlength="500" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="rating" class="control-label">Rating:</label>
                        <div class="rating-stars">
                            <i class="far fa-star" data-value="1"></i>
                            <i class="far fa-star" data-value="2"></i>
                            <i class="far fa-star" data-value="3"></i>
                            <i class="far fa-star" data-value="4"></i>
                            <i class="far fa-star" data-value="5"></i>
                        </div>
                        <input type="hidden" name="Rating" id="Rating" value="" />
                        <span class="text-danger"></span>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="review-btn btn btn-primary">
                            <span class="create-modal-button">Create</span>
                            <span class="edit-modal-button d-none">Update</span>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>

        $(document).ready(function () {

            // This function is triggered when the delete button is clicked
            $(document).on('click', '.delete-button', function () {
                var id = $(this).data("id");
                console.log(id);
                // Set the action attribute of the delete form and add the id of the item to be deleted to the URL
                $("#delete-form").attr("action", "/Review/Delete/" + id);
                // Set the value of the hidden input element with the name "id" to the id of the item to be deleted
                $("#delete-form input[name=id]").val(id);
            });

            // This function is triggered when a star is clicked in the rating section
            $(".rating-stars i").click(function () {
                var star = $(this);
                var rating = star.attr("data-value");
                // Set the value of the hidden input element with the name "Rating" to the value of the selected star
                $("#Rating").val(rating);
                // Add and remove the "fas" and "far" classes to the star elements to show the selected rating
                star.siblings().removeClass("fas").addClass("far");
                star.removeClass("far").addClass("fas").prevAll().removeClass("far").addClass("fas");
                star.nextAll().removeClass("fas").addClass("far");
            })

                // This function is triggered when the mouse moves over the stars in the rating section
                .mousemove(function () {
                    var star = $(this);
                    // Add and remove the "fas" and "far" classes to the star elements to show the rating being hovered over
                    star.addClass("fas").prevAll().addClass("fas");
                    star.nextAll().removeClass("fas").addClass("far");
                    star.removeClass("far");
                    // Show the rating being hovered over as a label next to the stars
                    $(this).parent().find(".rating-label").html(star.index() + 1);
                })

                // This function is triggered when the mouse leaves the stars in the rating section
                .mouseleave(function () {
                    var rating = $("#Rating").val();
                    if (rating) {
                        // Add and remove the "fas" and "far" classes to the star elements to show the selected rating
                        var selectedStar = $(".rating-stars i[data-value='" + rating + "']");
                        selectedStar.siblings().removeClass("fas").addClass("far");
                        selectedStar.removeClass("far").addClass("fas").prevAll().removeClass("far").addClass("fas");
                        selectedStar.nextAll().removeClass("fas").addClass("far");
                    } else {
                        // Add and remove the "fas" and "far" classes to the star elements to show that no rating is selected
                        $(this).siblings().removeClass("fas").addClass("far");
                        $(this).removeClass("fas").addClass("far");
                    }
                    // Show the rating being hovered over as a label next to the stars (or clear the label if no rating is selected)
                    $(this).parent().find(".rating-label").html(rating ? rating : "");
                });
        });

        $(document).ready(function () {

            var ratingValue = null;

            // This function is triggered when the mouse moves over the stars in the rating section of the create/edit review modal
            $('.rating-stars').on('mouseover', 'i', function () {
                $(this).prevAll().addBack().addClass('star-hover');
            })

                // This function is triggered when the mouse leaves the stars in the rating section of the create/edit review modal
                .on('mouseout', 'i', function () {
                    $(this).prevAll().addBack().removeClass('star-hover');
                })

                // This function is triggered when a star is clicked in the rating section of the create/edit review modal
                .on('click', 'i', function () {
                    ratingValue = $(this).data('value');
                    $('#Rating').val(ratingValue);
                });

            // This function is triggered when the create/edit review modal is shown
            $('#create-review-modal').on('show.bs.modal', function (e) {
                var action = $(e.relatedTarget).data('action');
                if (action === 'edit') {
                    // If the modal is being used to edit an existing review, pre-fill the form fields with the review data
                    var reviewId = $(e.relatedTarget).data('bs-id');
                    var reviewDescription = $(e.relatedTarget).data('bs-description');
                    var reviewRating = $(e.relatedTarget).data('bs-rating');
                    $(this).find('.modal-title').text('Edit Review');
                    $(this).find('.modal-body #Review1').val(reviewDescription);

                    // Set the rating stars to fas based on the reviewRating value
                    var ratingStars = $(this).find('.modal-body .rating-stars i');
                    ratingStars.removeClass('far').addClass('fas').slice(reviewRating).removeClass('fas').addClass('far');

                    $(this).find('.modal-body #Rating').val(reviewRating);
                    $(this).find('.modal-footer button[type=submit]').text('Update');
                    $(this).find('.modal-body form').attr('action', '/Review/Edit/' + reviewId);

                } else {
                    // If the modal is being used to create a new review, clear the form fields
                    $(this).find('.modal-title').text('Create Review');
                    $(this).find('.modal-body #Review1').val('');
                    $(this).find('.modal-body #Rating').val('');
                    $(this).find('.modal-footer button[type=submit]').text('Create');
                    $(this).find('.modal-body form').attr('action', '/Review/Create');
                }
            });

            // This function is triggered when the edit button is clicked on an existing review
            $('.edit-review').on('click', function () {
                ratingValue = $(this).data('bs-rating');
            });

            // This function is triggered when the create/edit review modal is hidden
            $('#create-review-modal').on('hidden.bs.modal', function () {
                ratingValue = null;
                $('.rating-stars i').removeClass('star-hover');
                $('#Rating').val('');
                $('#Review1').val('');
            });

            // This function is triggered when the create/edit form is submitted
            $('#create-edit-form').submit(function (e) {
                if (ratingValue === null) {
                    e.preventDefault();
                    $('.rating-stars .text-danger').text('Please select a rating');
                } else {
                    $('.rating-stars .text-danger').text('');
                }
            });
        });
    </script>
}